<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>netstandard2.1;net5;net6</TargetFrameworks>
		<Nullable>enable</Nullable>
		<ImplicitUsings>disable</ImplicitUsings>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<PackageId>GoWorkPro.CsvBuilder</PackageId>
		<Title>CSV Builder</Title>
		<Authors>Samer Shahbaz </Authors>
		<Company>GoWorkPro</Company>
		<Description>
Very simple and Easy to use, convert datatables to CSV
Author: Samer Shahbaz

Create Date: 15/11/2023

Description:
The CsvBuilder utility, developed by Samer Shahbaz, is a powerful tool designed to simplify the process of creating CSV (Comma-Separated Values) files using .NET DataTables. This utility provides a convenient and efficient way to generate CSV data from one or more DataTables within a DataSet.

Key Features:

DataSet Integration: Accepts a DataSet as input, allowing the user to aggregate multiple DataTables for CSV creation.
Flexible Value Rendering: Supports a customizable event, ValueRenderEvent, which allows users to define a custom parser for values based on their data type (column or row).
Multiple DataTable Support: Enables the user to selectively include columns from different DataTables by specifying the table index.
Stream Handling: The utility efficiently manages memory streams to optimize CSV generation.
Dispose Method: Implements the IDisposable interface for proper resource management.
Usage:

Constructor:
Static Method for Creating CsvBuilder with Multiple DataTables:
CsvBuilder csvBuilder = CsvBuilder.Datasets(dataTable1, dataTable2, ...);

Building CSV:
csvBuilder.Build(tableIndex1, tableIndex2, ...)
Customizing Value Rendering:

Subscribe to the ValueRenderEvent to define custom parsing logic for column and row values.

Output Handling:
Obtain the CSV content as a Stream:
Stream csvStream = csvBuilder.GetStream();
Save the CSV content to a file:

csvBuilder.SaveAsFile("filePath.csv");

Example #1:

// Create CsvBuilder with a DataSet
ICsvBuilder csvBuilder = CsvBuilder.Datasets(dataSet);

// Build CSV with selected columns from specific DataTables
ICsvExtractor csvExtractor = csvBuilder.Build();

// Obtain CSV content as a Stream
MemoryStream csvStream = csvExtractor.GetStream();

// Save CSV content to a file
csvExtractor.SaveAsFile("output.csv");

//dispose if necessary
csvBuilder.Dispose();
This utility simplifies the process of CSV generation, providing users with a flexible and efficient solution for working with tabular data in the .NET environment.

For More Information See 
https://goworkpro.github.io/CSV-Builder-Utility/
</Description>
		<Copyright>CsvBuilder Utility Â© 2023 Samer Shahbaz. All rights reserved.</Copyright>
		<PackageIcon>csv-icon.png</PackageIcon>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<Version>3.0.1</Version>
		<PackageProjectUrl>https://goworkpro.github.io/CSV-Builder-Utility/</PackageProjectUrl>
		<RepositoryType>git</RepositoryType>
		<RepositoryUrl>https://github.com/GoWorkPro/CSV-Builder.git</RepositoryUrl>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\..\..\..\Desktop\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include="..\..\..\..\Downloads\csv-icon.png">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
	  <PackageReference Include="ClosedXML" Version="0.102.1" />
	  <PackageReference Include="Microsoft.Win32.Registry" Version="5.0.0" />
	  <PackageReference Include="System.Security.Cryptography.ProtectedData" Version="8.0.0" />
	</ItemGroup>

</Project>
